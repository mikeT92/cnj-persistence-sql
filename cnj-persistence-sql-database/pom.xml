<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>edu.hm.cs.fwp.cloud</groupId>
    <artifactId>cnj-persistence-sql-database</artifactId>
    <version>1.0.0</version>
    <packaging>jar</packaging>
    <description>Common database model of all cloud native Java backends demonstrating JPA persistence</description>
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <java.version>1.8</java.version>
        <junit.version>5.3.2</junit.version>
        <docker.organization.name>hmfwpcnj</docker.organization.name>
        <docker.image.name>${docker.organization.name}/${project.artifactId}</docker.image.name>
        <docker.removeMode>all</docker.removeMode>
        <docker.cleanup>try</docker.cleanup>
        <docker.verbose>true</docker.verbose>
        <microprofile.version>2.1</microprofile.version>
        <postgres.jdbc.version>42.2.5</postgres.jdbc.version>
        <maven.docker.plugin.version>0.27.2</maven.docker.plugin.version>
        <maven.docker.compose.plugin.version>2.2.0</maven.docker.compose.plugin.version>
        <maven.enforcer.plugin.version>3.0.0-M2</maven.enforcer.plugin.version>
        <maven.failsafe.plugin.version>2.22.1</maven.failsafe.plugin.version>
        <maven.surefire.plugin.version>2.22.1</maven.surefire.plugin.version>
        <maven.compiler.plugin.version>3.8.0</maven.compiler.plugin.version>
        <maven.jar.plugin.version>3.1.1</maven.jar.plugin.version>
        <maven.resources.plugin.version>3.1.0</maven.resources.plugin.version>
        <maven.clean.plugin.version>3.1.0</maven.clean.plugin.version>
        <maven.deploy.plugin.version>2.8.2</maven.deploy.plugin.version>
        <maven.install.plugin.version>2.5.2</maven.install.plugin.version>
        <maven.site.plugin.version>3.7.1</maven.site.plugin.version>
        <maven.war.plugin.version>3.2.2</maven.war.plugin.version>
    </properties>
    <dependencyManagement>
        <dependencies>
            <!-- Payara JEE 8 runtime dependencies -->
            <dependency>
                <groupId>fish.payara.extras</groupId>
                <artifactId>payara-embedded-all</artifactId>
                <version>5.184</version>
                <scope>provided</scope>
            </dependency>
            <!-- Generic JEE 8 runtime dependencies -->
            <dependency>
                <groupId>javax</groupId>
                <artifactId>javaee-api</artifactId>
                <version>8.0</version>
                <scope>compile</scope>
            </dependency>
            <!-- Miscellaneous 3rd party stuff -->
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-lang3</artifactId>
                <version>3.8.1</version>
            </dependency>
            <!-- Test runtime dependencies -->
            <!-- JUnit 5.x -->
            <dependency>
                <groupId>org.junit</groupId>
                <artifactId>junit-bom</artifactId>
                <version>${junit.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <!-- common persistence support -->
            <dependency>
                <groupId>edu.hm.cs.fwp.cloud.common</groupId>
                <artifactId>cnj-common-persistence-jpa</artifactId>
                <version>1.0.0</version>
            </dependency>
        </dependencies>
    </dependencyManagement>
    <dependencies>
        <dependency>
            <groupId>javax</groupId>
            <artifactId>javaee-api</artifactId>
            <scope>provided</scope>
        </dependency>
        <!-- Payara MicroProfile API BOM imports all MicroProfile API's -->
        <!-- declaring this particular BOM in dependencyManagement section does not work!!! -->
        <dependency>
            <groupId>org.eclipse.microprofile</groupId>
            <artifactId>microprofile</artifactId>
            <version>${microprofile.version}</version>
            <type>pom</type>
            <scope>provided</scope>
        </dependency>
        <!-- Miscellaneous 3rd party stuff -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
        </dependency>
        <dependency>
            <groupId>edu.hm.cs.fwp.cloud.common</groupId>
            <artifactId>cnj-common-persistence-jpa</artifactId>
        </dependency>
        <!-- Payara Jakarta EE 8 runtime for testing purposes -->
        <dependency>
            <groupId>fish.payara.extras</groupId>
            <artifactId>payara-embedded-all</artifactId>
            <scope>test</scope>
        </dependency>
        <!-- Test runtime dependencies -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-params</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>edu.hm.cs.fwp.cloud</groupId>
            <artifactId>cnj-persistence-sql-backend-test</artifactId>
            <version>1.0.0</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <version>${postgres.jdbc.version}</version>
        </dependency>
    </dependencies>
    <build>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-clean-plugin</artifactId>
                    <version>${maven.clean.plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>${maven.compiler.plugin.version}</version>
                    <configuration>
                        <source>1.8</source>
                        <target>1.8</target>
                        <parameters>true</parameters>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-deploy-plugin</artifactId>
                    <version>${maven.deploy.plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-enforcer-plugin</artifactId>
                    <version>${maven.enforcer.plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-install-plugin</artifactId>
                    <version>${maven.install.plugin.version}</version>
                </plugin>
                <plugin>
                    <artifactId>maven-site-plugin</artifactId>
                    <version>${maven.site.plugin.version}</version>
                </plugin>
                <plugin>
                    <artifactId>maven-resources-plugin</artifactId>
                    <version>${maven.resources.plugin.version}</version>
                </plugin>
                <!-- Flyway Maven Plugin fÃ¼r das Aufsetzen/Migrieren des Schemas in der Datenbank jeedemo_db -->
                <plugin>
                    <groupId>org.flywaydb</groupId>
                    <artifactId>flyway-maven-plugin</artifactId>
                </plugin>
            </plugins>
        </pluginManagement>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
                <executions>
                    <execution>
                        <id>enforce-versions</id>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                        <configuration>
                            <rules>
                                <requireMavenVersion>
                                    <version>[3.5,)</version>
                                </requireMavenVersion>
                                <requireJavaVersion>
                                    <version>1.8</version>
                                </requireJavaVersion>
                            </rules>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
    <profiles>
        <profile>
            <id>pre-commit-stage</id>
            <properties>
                <test.target.route>http://192.168.99.100:8080</test.target.route>
                <postgres.host>192.168.99.100</postgres.host>
                <postgres.port>5432</postgres.port>
                <postgres.database>cloudtrain</postgres.database>
                <postgres.url>jdbc:postgresql://${postgres.host}:${postgres.port}/${postgres.database}</postgres.url>
                <postgres.admin.user>postgres</postgres.admin.user>
                <postgres.admin.password>changeit</postgres.admin.password>
            </properties>
        </profile>
    </profiles>
</project>
